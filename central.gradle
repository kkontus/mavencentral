/**
 *
 * CODE BELOW IS USED FOR DEPLOYING LIBRARY TO MAVEN CENTRAL AND JCENTRAL
 * CREDENTIALS ARE STORED TO gradle.properties AS FOLLOWS
 *
 * # MAVEN
 * signing.keyId=xxxxxxxx //gpg key
 * signing.password=xxxxxxxx //gpg pass
 * signing.secretKeyRingFile=/Users/<your_user>/.gnupg/secring.gpg
 * ossrhUsername=xxxxxx //sonatype user
 * ossrhPassword=xxxxxx //sonatype password
 * stagingRepositoryUrl=https://oss.sonatype.org/service/local/staging/deploy/maven2/
 * snapshotRepositoryUrl=https://oss.sonatype.org/content/repositories/snapshots/
 *
 * # JCENTRAL
 * bintray.user=xxxxxx //bintray user
 * bintray.apikey=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx //bintray api key
 *
 */

//USED FOR MAVEN CENTRAL
//Code below is used to deploy library (sdk) to maven central repository
//go to library folder and use ../gradlew uploadArchives in terminal to publish it to maven central

apply plugin: 'maven'
apply plugin: 'signing'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: stagingRepositoryUrl) {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: snapshotRepositoryUrl) {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name projectName
                packaging packagingType
                groupId publishedGroupId
                // optionally artifactId can be defined here
                //artifactId publishedArtifactId
                description projectDescription
                url siteUrl

                scm {
                    connection scmConnection
                    developerConnection scmDeveloperConnection
                    url scmUrl
                }

                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }

                developers {
                    developer {
                        id devId
                        name devName
                        email devEmail
                    }
                }
            }
        }
    }
}

//USED FOR JCENTRAL
//Code below is used to deploy library (sdk) to jcentral repository
//go to library folder and use ../gradlew bintrayUpload in terminal to publish it to jcentral

apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'


Properties properties = new Properties()
//properties.load(project.rootProject.file('local.properties').newDataInputStream())
properties.load(project.rootProject.file('gradle.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = repoName
        name = libraryName
        websiteUrl = siteUrl
        vcsUrl = scmUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom.project {
            name projectName
            packaging packagingType
            groupId publishedGroupId
            // optionally artifactId can be defined here
            //artifactId publishedArtifactId
            description projectDescription
            url siteUrl

            scm {
                connection scmConnection
                developerConnection scmDeveloperConnection
                url scmUrl
            }

            licenses {
                license {
                    name licenseName
                    url licenseUrl
                }
            }

            developers {
                developer {
                    id devId
                    name devName
                    email devEmail
                }
            }
        }
    }
}
